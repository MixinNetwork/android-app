def versionMajor = 0
def versionMinor = 32
def versionPatch = 2
def versionBuild = 0

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-parcelize'

android {
    compileSdkVersion 31
    buildToolsVersion "31.0.0"
    ndkVersion "21.3.6528147"
    defaultConfig {
        applicationId "one.mixin.messenger"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        multiDexEnabled true
        testInstrumentationRunner "one.mixin.android.CustomTestRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation": "$projectDir/schemas".toString()
                ]
            }
        }

        buildConfigField 'String', 'BUGSNAG_API_KEY', "\"${propOrEmpty('MIXIN_BUGSNAG_API_KEY')}\""
        buildConfigField 'String', 'APPCENTER_API_KEY', "\"${propOrEmpty('MIXIN_APPCENTER_API_KEY')}\""
        buildConfigField 'String', 'RECAPTCHA_KEY', "\"${propOrEmpty('MIXIN_RECAPTCHA_KEY')}\""
        buildConfigField 'String', 'HCAPTCHA_KEY', "\"${propOrEmpty('MIXIN_HCAPTCHA_KEY')}\""
        buildConfigField 'String', 'GIPHY_KEY', "\"${propOrEmpty('MIXIN_GIPHY_KEY')}\""
        buildConfigField 'String', 'SafetyNet_API_KEY', "\"${propOrEmpty('MIXIN_SAFETYNET_API_KEY')}\""
        buildConfigField 'String', 'FS_CLIENT_ID', "\"${propOrEmpty('MIXIN_FS_CLIENT_ID')}\""
        buildConfigField 'String', 'FS_SECRET', "\"${propOrEmpty('MIXIN_FS_SECRET')}\""
        buildConfigField 'String', 'GOOGLE_MAP_KEY', "\"${propOrEmpty('MIXIN_GOOGLE_MAP_KEY')}\""
        resValue "string", "google_maps_key", propOrEmpty('MIXIN_GOOGLE_MAP_KEY')
        buildConfigField 'String', 'MAPBOX_PUBLIC_TOKEN', "\"${propOrEmpty('MAPBOX_PUBLIC_TOKEN')}\""

        packagingOptions {
            exclude 'kotlin/**'
            exclude '**/*.kotlin_metadata'
            exclude 'META-INF/*.kotlin_module'
            exclude 'META-INF/*.version'
        }

        kotlinOptions {
            jvmTarget = '11'
            freeCompilerArgs += ['-Xuse-experimental=kotlin.contracts.ExperimentalContracts']
        }

        vectorDrawables.useSupportLibrary = true
    }

    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = false
        }
        abi {
            enableSplit = true
        }
    }
    buildFeatures {
        viewBinding true
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDirs += sharedTestDir
        }
        androidTest {
            java.srcDirs += sharedTestDir
            assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        targetCompatibility JavaVersion.VERSION_11
        sourceCompatibility JavaVersion.VERSION_11
    }

    dependenciesInfo {
        includeInApk = false
        includeInBundle = false
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    productFlavors {
    }

    signingConfigs {
        debug {
            storeFile file('keys/debug.keystore')
            storePassword 'android'
            keyAlias 'AndroidDebugKey'
            keyPassword 'android'
        }
        if (project.hasProperty("RELEASE_STORE_FILE")) {
            release {
                keyAlias "${RELEASE_KEY_ALIAS}"
                keyPassword "${RELEASE_KEY_PASSWORD}"
                storeFile file("${RELEASE_STORE_FILE}")
                storePassword "${RELEASE_STORE_PASSWORD}"
            }
        }
    }

    testBuildType "staging"

    buildTypes {
        if (project.hasProperty("RELEASE_STORE_FILE")) {
            release {
                ndk {
                    abiFilters "armeabi-v7a", "arm64-v8a"
                }
                debuggable false
                jniDebuggable false
                shrinkResources true
                minifyEnabled true
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
            }
        }
        debug {
            signingConfig signingConfigs.debug
            jniDebuggable false
            ndk {
                abiFilters "arm64-v8a"
            }
        }
        staging {
            initWith debug
            applicationIdSuffix ".test"
        }
    }

    lintOptions {
        abortOnError false
    }
    configurations {
        ktlint
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    configurations.all {
        resolutionStrategy.force "com.android.tools.build.jetifier:jetifier-core:1.0.0-beta10"
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    implementation platform("com.google.firebase:firebase-bom:28.4.0")
    implementation fileTree(include: ['*.aar'], dir: 'libs')
    implementation "androidx.fragment:fragment-ktx:${fragmentVersion}"
    implementation "androidx.appcompat:appcompat:${appcompatVersion}"
    implementation "androidx.legacy:legacy-support-v4:${supportLibVersion}"
    implementation "com.google.android.material:material:${mdcVersion}"
    implementation "androidx.recyclerview:recyclerview:${recyclerViewVersion}"
    implementation "androidx.exifinterface:exifinterface:${exifinterfaceVersion}"
    implementation "androidx.browser:browser:${browser_version}"
    implementation "androidx.constraintlayout:constraintlayout:${constraintLayoutVersion}"
    implementation "androidx.core:core-ktx:${androidxVersion}"
    implementation "androidx.collection:collection-ktx:${collectionx}"
    implementation "androidx.preference:preference-ktx:${preference_version}"
    implementation "androidx.viewpager2:viewpager2:${viewpagerVersion}"
    implementation "androidx.sharetarget:sharetarget:${sharetargetVersion}"
    implementation "androidx.coordinatorlayout:coordinatorlayout:${coordinatorVersion}"
    implementation "androidx.biometric:biometric:${biometric_version}"

    implementation "androidx.camera:camera-core:${cameraxVersion}"
    implementation "androidx.camera:camera-camera2:${cameraxVersion}"
    implementation "androidx.camera:camera-view:${cameraxviewVersion}"
    implementation "androidx.camera:camera-lifecycle:${cameraxVersion}"

    implementation "androidx.work:work-runtime-ktx:${workManagerVersion}"
    implementation "androidx.navigation:navigation-fragment-ktx:${navigationVersion}"
    implementation "androidx.navigation:navigation-ui-ktx:${navigationVersion}"

    // Architecture components
    implementation "androidx.paging:paging-runtime-ktx:${pagingVersion}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${lifecycle_version}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${lifecycle_version}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${lifecycle_version}"
    implementation "androidx.lifecycle:lifecycle-service:${lifecycle_version}"
    implementation "androidx.lifecycle:lifecycle-common-java8:${lifecycle_version}"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    implementation "androidx.room:room-runtime:${roomVersion}"
    kapt "androidx.room:room-compiler:${roomVersion}"
    implementation "androidx.room:room-rxjava2:${roomVersion}"
    implementation "androidx.room:room-ktx:${roomVersion}"
    testImplementation "androidx.room:room-testing:${roomVersion}"

    // DI
    implementation "com.google.dagger:hilt-android:${hiltVersion}"
    kapt "com.google.dagger:hilt-android-compiler:${hiltVersion}"
    implementation "androidx.hilt:hilt-work:${hiltAndroidxVersion}"
    kapt "androidx.hilt:hilt-compiler:${hiltAndroidxVersion}"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:${rxJavaVersion}"
    implementation "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}"
    implementation 'com.github.MixinNetwork.jjwt:jjwt-api:102e61bc08'

    runtimeOnly 'com.github.MixinNetwork.jjwt:jjwt-impl:102e61bc08'
    runtimeOnly('com.github.MixinNetwork.jjwt:jjwt-orgjson:102e61bc08') {
        exclude group: 'org.json', module: 'json' //provided by Android natively
    }
    implementation "com.jakewharton.threetenabp:threetenabp:${threetenabpVersion}"
    implementation("com.bugsnag:bugsnag-android:${bugsnagVersion}") {
        exclude group: "com.bugsnag", module: "bugsnag-plugin-android-anr"
        exclude group: "com.bugsnag", module: "bugsnag-plugin-android-ndk"
    }

    // retrofit
    implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    implementation("com.squareup.okhttp3:logging-interceptor:${okhttpVersion}")
    implementation("com.squareup.okhttp3:okhttp-tls:${okhttpVersion}")
    implementation("com.squareup.retrofit2:retrofit:${retrofitVersion}")
    implementation("com.squareup.retrofit2:converter-gson:${retrofitVersion}")
    implementation("com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}")
    implementation "com.jakewharton.rxbinding3:rxbinding:${rxbindingVersion}"
    implementation("com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:${coroutineAdapterVersion}")

    implementation "com.google.code.gson:gson:${gsonVersion}"

    implementation "com.google.firebase:firebase-messaging-ktx"
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-dynamic-links-ktx'

    implementation "com.google.mlkit:barcode-scanning:${mlkitBarcodeVersion}"
    implementation "com.google.android.play:core:${playVersion}"
    implementation "com.google.android.gms:play-services-safetynet:${google_play_services_version}"
    implementation "com.google.android.gms:play-services-maps:${google_play_services_version}"
    implementation "com.google.zxing:core:${zxingVersion}"
    implementation "com.github.tougee:sticky-headers-recyclerview:${stickyheadersrecyclerviewVersion}"
    implementation "org.whispersystems:signal-protocol-android:${signalVersion}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"
    implementation "org.jetbrains.anko:anko-commons:$anko_version"
    implementation "org.jetbrains.anko:anko-sdk25:$anko_version"
    implementation "org.jetbrains.anko:anko-appcompat-v7:$anko_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "com.zlc.glide:webpdecoder:$webpdecoderVesion"
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    implementation("com.github.bumptech.glide:okhttp3-integration:$glideVersion")
    kapt "com.github.bumptech.glide:compiler:$glideVersion"
    implementation "jp.wasabeef:glide-transformations:${glideTransformationsVersion}"
    implementation "com.jakewharton.timber:timber:${timberVersion}"
    implementation "com.github.tougee:FABProgressCircle:${fabprogresscircleVersion}"
    implementation "com.github.tougee:country-picker-android:${countryPickerVersion}"
    implementation "com.dmitrymalkovich.android:progress-fab:${fabVersion}"
    implementation "com.googlecode.libphonenumber:libphonenumber:${libphonenumberVersion}"
    implementation "com.github.tougee:rx-contacts2:${rxContactsVersion}"
    implementation "com.github.tougee:android-priority-jobqueue:${jobqueueVersion}"
    implementation "com.github.tougee:rxpermissions:${rxpermissionsVersion}"
    implementation("com.github.yalantis:ucrop:${ucropVersion}")
    implementation "com.facebook.rebound:rebound:${reboundVersion}"

    implementation "com.uber.autodispose:autodispose:${autodisposeVersion}"
    implementation "com.uber.autodispose:autodispose-android:${autodisposeVersion}"
    implementation "com.uber.autodispose:autodispose-android-archcomponents:${autodisposeVersion}"
    implementation "com.uber.autodispose:autodispose-lifecycle:${autodisposeVersion}"
    implementation "com.google.android.exoplayer:exoplayer-core:${exoplayerVersion}"
    implementation "com.google.android.exoplayer:exoplayer-hls:${exoplayerVersion}"
    implementation "com.google.android.exoplayer:exoplayer-ui:${exoplayerVersion}"
    implementation "com.google.android.exoplayer:extension-mediasession:${exoplayerVersion}"
    implementation "com.googlecode.mp4parser:isoparser:${isoparserVersion}"
    implementation "com.github.SeniorZhai:LargeImage:${largeImageViewVersion}"
    implementation "io.noties.markwon:core:${markwonVersion}"
    implementation "io.noties.markwon:image:${markwonVersion}"
    implementation "io.noties.markwon:image-glide:${markwonVersion}"
    implementation "io.noties.markwon:ext-tables:${markwonVersion}"
    implementation "io.noties.markwon:recycler:${markwonVersion}"
    implementation "io.noties.markwon:ext-strikethrough:${markwonVersion}"
    implementation "io.noties.markwon:html:${markwonVersion}"
    implementation "io.noties.markwon:editor:${markwonVersion}"
    implementation "io.noties:prism4j:${prism4jVersion}"
    implementation "io.noties.markwon:syntax-highlight:${markwonVersion}"
    implementation "io.noties.markwon:ext-tasklist:${markwonVersion}"
    implementation "com.github.SandroMachado:BitcoinPaymentURI:${bitcoinPaymentURI}"
    implementation "com.caverock:androidsvg-aar:${svgVersion}"
    implementation "androidx.startup:startup-runtime:${startupVersion}"
    implementation "dnsjava:dnsjava:${dnsVersion}"
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"
    implementation "com.twilio:audioswitch:$audioSwitchVersion"
    implementation "com.github.skydoves:balloon:$balloonVersion"
    implementation "com.mapbox.mapboxsdk:mapbox-android-sdk:${mapboxSdkVersion}"
    implementation "com.mapbox.mapboxsdk:mapbox-android-plugin-locationlayer:${mapboxLocationVersion}"
    implementation "com.mattprecious.swirl:swirl:$swirlVersion"

    ktlint "com.pinterest:ktlint:${ktlintVersion}"

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    testImplementation "junit:junit:${junitVersion}"
    testImplementation "androidx.test:core:${testCoreVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"

    testImplementation "org.robolectric:robolectric:${robolectricVersion}"

    // for jwt unit test
    testImplementation "org.bouncycastle:bcprov-jdk16:${bcVersion}"
    testImplementation "org.json:json:${jsonVersion}"

    androidTestImplementation "junit:junit:${junitVersion}"
    androidTestImplementation("androidx.test.espresso:espresso-core:${espressoVersion}", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation("androidx.test.espresso:espresso-contrib:${espressoVersion}", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"
    androidTestImplementation "androidx.test.ext:junit:${androidxJunitVersion}"
    stagingImplementation "androidx.fragment:fragment-testing:${fragmentVersion}"
    androidTestImplementation "androidx.navigation:navigation-testing:$navigationVersion"

    // Hilt testing
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hiltVersion"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hiltVersion"
    kaptAndroidTest "androidx.hilt:hilt-compiler:$hiltAndroidxVersion"

}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}

configurations.all {
    exclude group: 'org.jetbrains', module: 'annotations-java5'
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

task allTests(dependsOn: ['testStagingUnitTest', 'connectedStagingAndroidTest']) {
    description = "Run unit tests and instrumentation tests"
}
